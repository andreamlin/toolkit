version: 2.0

anchor_artman_vars: &anchor_artman_vars
  ARTMAN_REPORTS_DIR: /tmp/workspace/reports/generations

anchor_auth_vars: &anchor_auth_vars
  GCLOUD_PROJECT: gapic-test
  GOOGLE_APPLICATION_CREDENTIALS: /tmp/workspace/gapic-generator/.circleci/gapic-generator-it-test.json

anchor_run_decrypt: &anchor_run_decrypt
  name: Decrypt credentials
  command: |
    openssl aes-256-cbc -md sha256 -d \
        -in /tmp/workspace/gapic-generator/.circleci/gapic-generator-it-test.json.enc \
        -out /tmp/workspace/gapic-generator/.circleci/gapic-generator-it-test.json \
        -k "${SYSTEM_TESTS_ENCRYPTION_KEY}"

anchor_check_generation: &anchor_check_generation
  command: |
    # LANGUAGE must be set in BASH_ENV in a prior command.
    if [ -e ${ARTMAN_REPORTS_DIR}/${LANGUAGE}.log ]
    then
        exit 0
    else
        exit 1
    fi

# We use this setup for jobs that verify that generation of a given language succeeded.
anchor_verify_generation: &anchor_verify_generation
  environment:
    <<: *anchor_artman_vars
  working_directory: /tmp/
  docker:
    # Use a small CircleCI Docker image which will support workspace persistence.
    - image: circleci/slim-base
  steps:
    - attach_workspace:
        # Load the REPORTS_DIR from generate-clients
        at: workspace
    - run:
        name: Check if language generation had succeeded.
        <<: *anchor_check_generation

# This command is called for each API that we run python nox tests on.
anchor_test_python: &anchor_test_python
  command: |
    cd workspace/gapic-generator/artman-genfiles/python/${TEST_API}
    nox --session "unit(py='2.7')"
    nox --session "unit(py='3.5')"
    nox --session "unit(py='3.6')"
    # python3.7 isn't installed on this Docker image yet, so we can't test against 3.7.
    # https://github.com/googleapis/gapic-generator/issues/2208
    nox --session "session(py='2.7')"
    nox --session "session(py='3.6')"
  when: always

anchor_test_ruby: &anchor_test_ruby
  command: |
    cd workspace/gapic-generator/artman-genfiles/ruby/google-cloud-ruby/${TEST_API}
    bundle update
    bundle exec rake test
    bundle exec rake acceptance
  when: always

jobs:
  build:
    docker:
      - image: googleapis/git
    steps:
      - checkout
    working_directory: /tmp/workspace/gapic-generator
  install-gapic-generator:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: /tmp/workspace
    steps:
      - checkout:
          path: gapic-generator
      - run:
          name: Checkout googleapis
          command: |
            mkdir -p googleapis
            git clone https://github.com/googleapis/googleapis.git googleapis
      - run:
          name: Build and install local toolkit
          command: |
            export RUNNING_IN_ARTMAN_DOCKER=True
            rm -rf gapic-generator/.git/
            gapic-generator/gradlew -p gapic-generator fatJar createToolPaths install build -x test -x javadoc
      - persist_to_workspace:
          # Save the toolkit and googleapis installations in workspace for later CircleCI jobs.
          root: /tmp/workspace
          paths:
            - gapic-generator
            - googleapis
  generate-clients:
    docker:
      - image: googleapis/artman:0.14.3
    working_directory: /tmp/
    environment:
      <<: *anchor_artman_vars
    steps:
      - attach_workspace:
          # Use the workspace created in install-gapic-generator
          at: workspace
      - run:
          name: Make reports directory
          command: |
            mkdir -p ${ARTMAN_REPORTS_DIR}
      - run:
          name: Generate all language libraries
          command: |
            cd workspace/gapic-generator
            python generate_clients.py \
                --user-config=.circleci/artman_config.yaml \
                --log-dir=${ARTMAN_REPORTS_DIR}
            # TODO: To add languages to generate, edit generate_clients.py
      - store_artifacts:
          path: /tmp/workspace/reports
      - store_artifacts:
          path: /tmp/workspace/gapic-generator/artman-genfiles
      - persist_to_workspace:
          # Save all generated directories in workspace for later CircleCI jobs.
          root: /tmp/workspace
          paths:
            - gapic-generator/artman-genfiles
            - reports
  verify-java-generation:
    <<: *anchor_verify_generation
    environment:
      LANGUAGE: java
  verify-python-generation:
    <<: *anchor_verify_generation
    environment:
      LANGUAGE: python
  verify-ruby-generation:
    <<: *anchor_verify_generation
    environment:
      LANGUAGE: ruby
  # TODO: verify other language clients were generated.
  test-java:
    working_directory: /tmp/
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - attach_workspace:
          # Use the workspace created in generate-clients
          at: workspace
      - run:
          name: Run all Java generated unit tests
          command: |
            cd workspace/gapic-generator/artman-genfiles/java
            ./gradlew build test
      # TODO: Java smoke tests.
      - run:
          name: Save test results
          command: |
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} /tmp/workspace/reports/ \;
          when: always
      - store_test_results:
          path: /tmp/workspace/reports
      - store_artifacts:
          path: /tmp/workspace/reports
  test-python:
    working_directory: /tmp/
    environment:
      <<: *anchor_auth_vars
    docker:
      # Use Docker image version v0.17.0 because latest v0.18.2 is not compatible with `attach_workspace` step.
      - image: googleapis/nox:0.17.0
    steps:
      - attach_workspace:
          # Use the workspace created in generate-clients
          at: workspace
      - checkout
      - run:
          <<: *anchor_run_decrypt
      # Generated Logging client is broken: https://github.com/googleapis/gapic-generator/issues/2209.
      - run:
          name: Prepare to run nox on pubsub
          command: echo 'export TEST_API="pubsub-v1"' >> $BASH_ENV
      - run:
          name: Run nox on pubsub
          <<: *anchor_test_python
      - run:
          name: Prepare to run nox on speech
          command: echo 'export TEST_API="speech-v1"' >> $BASH_ENV
      - run:
          name: Run nox on speech
          <<: *anchor_test_python
  test-ruby:
    working_directory: /tmp/
    docker:
      - image: circleci/ruby:2.4-node
    steps:
      - attach_workspace:
          # Use the workspace created in generate-clients
          at: workspace
      - checkout
      - run:
          <<: *anchor_run_decrypt
      - run:
          name: Prepare to test Pubsub.
          command: echo 'export TEST_API="google-cloud-pubsub"' >> $BASH_ENV
      - run:
          name: Test Pubsub.
          <<: *anchor_test_ruby
      - run:
          name: Prepare to test Speech.
          command: echo 'export TEST_API="google-cloud-speech"' >> $BASH_ENV
      - run:
          name: Test Speech.
          <<: *anchor_test_ruby
      - run:
          name: Prepare to test Logging.
          command: echo 'export TEST_API="google-cloud-logging"' >> $BASH_ENV
      - run:
          name: Test Logging.
          <<: *anchor_test_ruby
  # TODO: test other language clients.

workflows:
  version: 2
  run_generated_tests:
    jobs:
      - install-gapic-generator
      - generate-clients:
          requires:
            - install-gapic-generator
      - verify-java-generation:
          requires:
            - generate-clients
      - verify-python-generation:
          requires:
            - generate-clients
      - verify-ruby-generation:
          requires:
            - generate-clients
      - test-java:
          requires:
            - verify-java-generation
      - test-python:
          requires:
            - verify-python-generation
      - test-ruby:
          requires:
            - verify-ruby-generation

machine:
  services:
    - docker
